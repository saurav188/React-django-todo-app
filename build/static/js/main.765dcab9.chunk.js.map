{"version":3,"sources":["hooks/Fetcher.js","components/EachTask.js","components/TaskContainer.js","App.js","serviceWorker.js","index.js"],"names":["Fetcher","url","useEffect","a","fetch","response","json","json_response","getTask","AllTaskFetcher","useState","task","EachTask","props","completed_status","id","responseChanger","EditCompletedStatus","title","completed","method","headers","body","JSON","stringify","type","checked","onInput","unchecked","String","key","className","value","onChange","e","target","class","onClick","window","location","reload","TaskContainer","tasks","placeholder","task_title","parentNode","children","document","querySelector","map","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.765dcab9.chunk.js","sourcesContent":["import {useEffect,useState} from 'react';\r\n\r\nfunction Fetcher(url){\r\n    useEffect(()=>{\r\n        async function AllTaskFetcher(url){\r\n            const response=await fetch(url);\r\n            const json_response=await response.json();\r\n            getTask(json_response);\r\n        };\r\n        AllTaskFetcher(url);\r\n    },[url]);\r\n\r\n    const [task,getTask]=useState([]);\r\n    return [task,getTask];\r\n}\r\n\r\nexport default Fetcher;","import React from 'react';\r\nimport Fetcher from '../hooks/Fetcher';\r\n\r\nfunction EachTask(props){\r\n    const id=props.id;\r\n    const url='https://frozen-savannah-33670.herokuapp.com/api/get_task/'+id;\r\n    let [response,responseChanger]=Fetcher(url);\r\n    let task=response;\r\n    function EditCompletedStatus(){\r\n        responseChanger({\r\n            \"id\":task.id,\r\n            \"title\":task.title,\r\n            \"completed\":!task.completed\r\n        });\r\n        fetch(`https://frozen-savannah-33670.herokuapp.com/api/edit_task/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\":task.id,\r\n                \"title\":task.title,\r\n                \"completed\":!task.completed\r\n            })\r\n        });\r\n    };\r\n    let completed_status;\r\n    if(task.completed){\r\n        completed_status=<input type=\"checkbox\" checked onInput={EditCompletedStatus}></input>\r\n    }else{\r\n        completed_status=<input type=\"checkbox\" unchecked={String(task.completed)} onInput={EditCompletedStatus}></input>\r\n    };\r\n    return (\r\n        <div  key={task.id} className=\"task\">\r\n            <input type=\"text\" value={task.title} onChange={(e)=>{\r\n                responseChanger({\r\n                    \"id\":task.id,\r\n                    \"title\":e.target.value,\r\n                    \"completed\":task.completed\r\n                })\r\n            }}></input>\r\n            <input type=\"button\" class=\"edit-btn\" value=\"edit\" onClick={()=>{\r\n                fetch(`https://frozen-savannah-33670.herokuapp.com/api/edit_task/${id}`, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                      'Accept': 'application/json',\r\n                      'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(task)\r\n                });\r\n            }}></input>\r\n            {completed_status}\r\n            <input type=\"button\" class=\"del-btn\" value=\"del\" onClick={()=>{\r\n                fetch(`https://frozen-savannah-33670.herokuapp.com/api/delete_task/${id}`, {\r\n                    method: 'DELETE'\r\n                });\r\n                window.location.reload();\r\n            }}></input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EachTask;","import React from 'react';\r\nimport EachTask from './EachTask'\r\nimport Fetcher from '../hooks/Fetcher';\r\n\r\n\r\nfunction TaskContainer(){\r\n    let url='https://frozen-savannah-33670.herokuapp.com/api/get_all_tasks/';\r\n    \r\n    let [response]=Fetcher(url);\r\n    let tasks=response;\r\n\r\n    function createTask(task_title){\r\n        if(task_title!==\"\"&&task_title!==\"enter your task here before saving...\"){\r\n            fetch(\"https://frozen-savannah-33670.herokuapp.com/api/create_task/\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"title\":task_title,\r\n                    \"completed\":false\r\n                })\r\n            });\r\n            document.querySelector('.task-creation').children[0].value=\"\";\r\n            window.location.reload();\r\n        }else{\r\n            document.querySelector('.task-creation').children[0].value=\"enter your task here before saving...\"\r\n        };\r\n    };\r\n    return(\r\n        <div className=\"tasks-container\">\r\n            <div className=\"task-creation\">\r\n                <input type=\"text\" placeholder=\"task here\"></input>\r\n                <input type=\"button\" value=\"Save\" onClick={(e)=>createTask(e.target.parentNode.children[0].value)}></input>\r\n            </div>\r\n            <div className=\"tasks\">\r\n                {tasks.map((task)=><EachTask id={task.id}/>)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskContainer","import React from 'react';\nimport './App.css';\nimport TaskContainer from './components/TaskContainer'\n\nfunction App() {\n    document.title=\"To-do App\"\n    return (\n        <div className=\"App\">\n\n            <h1 className=\"App-title\">Todo App</h1>\n            <TaskContainer />\n            \n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}